#!/usr/bin/env node
const { Server } = require('socket.io');
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('proyectowhatsapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server({
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

io.listen(4000);

let usuariosConectados = [];
let avatarEstado = [{}];

io.on('connection', (socket) => {
  console.log('Usuario conectado');

  socket.on('disconnect', () => {
    for(let i = 0; i < usuariosConectados.length;i++) {
      if(usuariosConectados[i] === socket.usuario) {
        usuariosConectados.splice(i,1);
        io.emit('listaUsuarios', usuariosConectados);
      }
    }
  });

  socket.on('nick',(msg) => {
    socket.usuario = msg;
    socket.join(msg);
    if (!usuariosConectados.includes(msg)) {
      usuariosConectados.push(msg);
    }
    console.log("Usuario conectado: " + msg)
    io.emit('listaUsuarios', usuariosConectados);
    console.log("Usuarios conectados:", usuariosConectados);
  })

  socket.on('desconectarUsuario', (usuario) => {
    for(let i = 0; i < usuariosConectados.length;i++) {
      if(usuariosConectados[i] === usuario) {
        usuariosConectados.splice(i,1);
        io.emit('listaUsuarios', usuariosConectados);
      }
    }
  }) 

  socket.on('mensaje',(mensaje) => {
    console.log(mensaje);
    socket.broadcast.emit('mensajeRecibido',mensaje);
  })

  socket.on('enviarChatPrivado',(datosUsuarios) => {
    io.emit('obtenerUsuarios',datosUsuarios);
  })

  socket.on('mensajePrivado', (mensaje) => {
    console.log(mensaje,"Servidor");
    io.to(mensaje.usuario).emit('mensajePrivadoRecibido', mensaje);
  });

  socket.on('enviarAvatarEstado', (datos) => { // avatar y estado
    avatarEstado = datos;
    console.log(avatarEstado);
  })

  socket.on('recogerAvatarEstado', () => {
    io.emit('AvatarEstado',avatarEstado);
  })

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
